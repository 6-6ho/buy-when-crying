version: '3.9'

services:
  # 1. Zookeeper
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - streaming-net
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # 2. Kafka
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - streaming-net
    volumes:
      - kafka-data:/kafka
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # 3. Spark Master
  spark-master:
    image: bitnami/spark:3.4
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"
      - "8080:8080"
    networks:
      - batch-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # 4. Spark Worker 1
  spark-worker-1:
    build: ./services/spark
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=${SPARK_MASTER_URL}
    depends_on:
      spark-master:
        condition: service_healthy
    ports:
      - "8081:8081"
    networks:
      - batch-net

  # 5. Spark Worker 2
  spark-worker-2:
    build: ./services/spark
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=${SPARK_MASTER_URL}
    depends_on:
      spark-master:
        condition: service_healthy
    ports:
      - "8082:8081"
    networks:
      - batch-net

  # 6. Flink JobManager
  flink-jobmanager:
    image: flink:1.16
    container_name: flink-jobmanager
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    ports:
      - "8083:8081"
    networks:
      - streaming-net

  # 7. Flink TaskManager
  flink-taskmanager:
    image: flink:1.16
    container_name: flink-taskmanager
    command: taskmanager
    depends_on:
      flink-jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    networks:
      - streaming-net

  # 8. Apache NiFi
  nifi:
    image: apache/nifi:latest
    container_name: nifi
    ports:
      - "8084:8080"
    volumes:
      - nifi-data:/opt/nifi/nifi-current/state
    networks:
      - streaming-net

  # 9. PostgreSQL
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - db-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # 10. FastAPI
  fastapi:
    build: ./services/fastapi
    container_name: fastapi
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - db-net

networks:
  streaming-net:
  batch-net:
  db-net:

volumes:
  postgres-data:
  kafka-data:
  nifi-data:
